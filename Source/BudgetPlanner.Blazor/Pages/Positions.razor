@page "/positions"

<PageTitle>Budget forecast</PageTitle>

@using BudgetPlanner.Blazor.Data
@using BudgetPlanner.Domain.Entities
@using System.Globalization
@inject BudgetService BudgetService

<h1>Budget Positions</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (budgets == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@budgetPosition" OnValidSubmit="@HandleValidSubmit">
        <InputText @bind-Value="budgetPosition.Description"/>
        <InputDate @bind-Value="budgetPosition.DueDate"/>
        <input type="number" value="@(budgetPosition.Ammount.ToString("G29"))" @onchange="@(e => budgetPosition.Ammount = decimal.Parse(e.Value.ToString(), NumberStyles.Any, CultureInfo.InvariantCulture))" />

        <button class="btn btn-primary" type="submit">Add</button>
    </EditForm>

    <table class="table">
        <thead>
            <tr>
                <th>Description</th>
                <th>Due Date</th>
                <th>Booked Date</th>
                <th>Amount</th>
                <th>Tags</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var budget in budgets)
            {
                <tr>
                    <td>@budget.Description</td>
                    <td>@budget.DueDate.ToShortDateString()</td>
                    <td>@budget.BookingDate.ToShortDateString()</td>
                    <td>@budget.Ammount</td>
                    <td>@string.Join(", ", budget.Tags)</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => RemoveBudget(budget.Id)">x</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<BudgetPosition>? budgets;

    protected override async Task OnInitializedAsync()
    {
        await Update();
    }

    private async Task Update()
    {
        budgets = await BudgetService.GetAllBudgetPositions();
    }

    protected async Task RemoveBudget(string id)
    {
        BudgetService.RemoveById(id);
        await Update();
    }

    private BudgetPosition budgetPosition = new BudgetPosition()
    {
            DueDate = DateOnly.FromDateTime(DateTime.Now),
            Description = "",
            BookingDate = DateOnly.MinValue,
            Tags = new List<string>
            {
                "Income",
                "NoTax"
            }
    };

    private async Task HandleValidSubmit()
    {
        BudgetService.StoreBudgetPosition(budgetPosition);
        await Update();
    }
}
