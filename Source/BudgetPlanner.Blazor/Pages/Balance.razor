@page "/balance"

<PageTitle>Balance</PageTitle>

@using System.Globalization
@using BudgetPlanner.Domain.Entities
@using VilligerElectronics.BudgetPlanner.Core
@inject IBalanceRepository BalanceRepo

<h1>Balance</h1>

@if (balancePositions == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@budgetPosition" OnValidSubmit="@HandleValidSubmit">
        <InputDate @bind-Value="budgetPosition.Date"/>
        <input type="number" value="@(budgetPosition.CurrentBalance.ToString("G29"))" @onchange="@(e => budgetPosition.CurrentBalance = decimal.Parse(e.Value.ToString(), NumberStyles.Any, CultureInfo.InvariantCulture))" />

        <button class="btn btn-primary" type="submit">Add</button>
    </EditForm>

    <table class="table">
        <thead>
            <tr>
                <th>Description</th>
                <th>Date</th>
                <th>Balance</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var balance in balancePositions)
            {
                <tr>
                    <td>@balance.Date</td>
                    <td>@balance.CurrentBalance.ToCurrency()</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => RemoveBudget(balance.Id)">x</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Domain.Entities.Balance>? balancePositions;

    protected override async Task OnInitializedAsync()
    {
        await Update();
    }

    private async Task Update()
    {
        var tempBalancePositions = await BalanceRepo.QueryAsync();
        balancePositions = tempBalancePositions.OrderBy(x => x.Date).ToList();
    }

    protected async Task RemoveBudget(string id)
    {
        BalanceRepo.Remove(id);
        await Update();
    }

    private Domain.Entities.Balance budgetPosition = new Domain.Entities.Balance()
    {
        CurrentBalance = 0,
        Date = DateOnly.FromDateTime(DateTime.Now)
    };

    private async Task HandleValidSubmit()
    {
        BalanceRepo.Store(budgetPosition);
        await Update();
    }
}
